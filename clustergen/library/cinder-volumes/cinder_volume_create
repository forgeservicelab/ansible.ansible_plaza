#!/usr/bin/python
# -*- coding: utf-8 -*-

try:
    from cinderclient.v2 import client as cinder_client
    import time
except ImportError:
    print("failed=True msg='cinderclient is required for this module to work'")

DOCUMENTATION = '''
---
module: cinder_volume_create
version_added: "1.8"
short_description: Add/Remove volumes on a tenant
description:
   - Add or Remove a volume on a tenant.
options:
   login_username:
     description:
        - login username to authenticate to keystone
     required: true
     default: None
   login_password:
     description:
        - Password of login user
     required: true
     default: None
   login_tenant_name:
     description:
        - The tenant name of the login user
     required: true
     default: None
   auth_url:
     description:
        - The keystone url for authentication
     required: false
     default: 'http://127.0.0.1:35357/v2.0/'
   state:
     description:
        - Indicate desired state of the resource. If `absent` at least one of *id* or *name* is required
     choices: ['present', 'absent']
     default: present
   force:
     description:
        - If yes, detach the volume from the instance if attached, prior to deletion
     choices: ['yes', 'no']
     default: no
   size:
     description:
        - Size of the volume in GB. Required if state is `present`
     required: false
     default: None
   name:
     description:
        - Name of the volume
     required: false
     default: None
   id:
     description:
        - ID of the volume
     required: false
     default: None
   snapshot_id:
     description:
        - ID of the snapshot to use as source of the volume
      required: false
   description:
     description:
        - Description of the volume
     required: false
   volume_type:
     description:
        - Type of volume
     required: false
   zone:
     description:
        - Availability Zone to use
     required: false
   meta:
     description:
        - Optional metadata to set on volume creation
     required: false
   image_ref:
     description:
        - Reference to an image stored in glance
     required: false
   source_volid:
     description:
        - ID of source volume to clone from
     required: false
   scheduler_hints:
     description:
        - arbitrary key-value pairs specified by the client to help boot an instance
     required: false
   wait:
     description:
        - If the module should wait for the Volume to be created.
     required: false
     default: 'yes'
   wait_for:
     description:
        - The amount of time the module should wait for the Volume to get into active state or to be detached if state is `absent` and force is `yes`
     required: false
     default: 180

requirements: ["cinderclient"]
'''
EXAMPLES = '''
# Creates a new volume with the specified name
- cinder_volume_create: state=present login_username=admin
                      login_password=admin login_tenant_name=admin name=ansible_volume

# Deletes an existing volume if detached
- cinder_volume_create: state=absent login_username=admin force=no
                      login_password=admin login_tenant_name=admin name=ansible_volume
'''


def _get_volume(module, cinder):
    try:
        kwargs = {
            'size': module.params['size'],
            'name': module.params['name'],
            'id': module.params['id']
        }

        if not module.params['name']:
            kwargs.pop('name', None)
        if not module.params['id']:
            kwargs.pop('id', None)

        return cinder.volumes.find(**kwargs)
    except Exception:
        return None


def _create_volume(module, cinder):
    try:
        kwargs = {
            'name':                 module.params['name'],
            'snapshot_id':          module.params['snapshot_id'],
            'description':          module.params['description'],
            'volume_type':          module.params['volume_type'],
            'availability_zone':    module.params['zone'],
            'metadata':             module.params['meta'],
            'imageRef':             module.params['image_ref'],
            'source_volid':         module.params['source_volid'],
            'scheduler_hints':      module.params['scheduler_hints']
        }

        vol = cinder.volumes.create(module.params['size'], **kwargs)
        if module.params['wait']:
            timeout = time.time() + module.params['wait_for']
            while vol.status == 'creating' and time.time() < timeout:
                time.sleep(2)
                vol.get()
            if time.time() > timeout:
                module.fail_json(msg="Timed out before volume came out of 'creating' state")
            
    except Exception as e:
        module.fail_json(msg="There was an error creating the volume: %s" % e.message)
    module.exit_json(changed=True, volume=dict(id=vol.id, size=vol.size))


def _delete_volume(volume, module, cinder):
    try:
        volume.get()
        if volume.status == 'in-use' and module.params['force']:
            volume.detach()
            # wait for it...
            timeout = time.time() + module.params['wait_for']
            while volume.status == 'in-use' and time.time() < timeout:
                time.sleep(2)
                volume.get()
            if time.time() > timeout:
                module.fail_json(msg="Timed out before volume was detached")
        volume.delete()
    except Exception as e:
        module.fail_json(msg="There was an error deleting the volume: %s" % e.message)
    module.exit_json(changed=True)


def main():
    """
    Main function - entry point.

    The magic starts here ;-)
    """
    module = AnsibleModule(
        argument_spec=dict(
            login_username=dict(required=True, aliases=["username"]),
            login_password=dict(required=True, aliases=["password"]),
            login_tenant_name=dict(required=True, aliases=["tenant_name"]),
            auth_url=dict(default='http://127.0.0.1:35357/v2.0/'),
            force=dict(required=False, default='no', type='bool'),
            state=dict(default='present', choices=['absent', 'present']),
            size=dict(required=False, type='int'),
            name=dict(required=False, default=None),
            id=dict(required=False, default=None),
            snapshot_id=dict(required=False),
            description=dict(required=False),
            volume_type=dict(required=False),
            zone=dict(required=False),
            meta=dict(required=False),
            image_ref=dict(required=False),
            source_volid=dict(required=False),
            wait=dict(default='yes', choices=['yes', 'no']),
            wait_for=dict(default=180),
            scheduler_hints=dict(required=False)
        )
    )

    try:
        cinder = cinder_client.Client(module.params['login_username'], module.params['login_password'],
                                      module.params['login_tenant_name'], module.params['auth_url'])
    except Exception as e:
        module.fail_json(msg="Error in authenticating to cinder: %s" % e.message)

    volume = _get_volume(module, cinder)
    if module.params['state'] == 'present':
        if not module.params['size']:
            module.fail_json(msg="size is required when requesting present state.")
        if not module.params['name'] and not module.params['id']:
            # _get_volume finds a volume if only one exists and no search parameters are given.
            # No search parameters on a present state are interpreted as a new creation, disregard found volume.
            _create_volume(module, cinder)
        else:
            if volume:
                module.exit_json(changed=False, volume=dict(id=volume.id, size=volume.size))
        _create_volume(module, cinder)
    if module.params['state'] == 'absent':
        if not module.params['name'] and not module.params['id']:
            module.fail_json(msg="One of name or id are required when requesting absent state.")
        if volume:
            _delete_volume(volume, module, cinder)
        module.exit_json(changed=False)

# This is magic, see Ansible docs.
from ansible.module_utils.basic import *
main()
